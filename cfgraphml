#!/usr/bin/env python

import json
import yaml
import six
#from awscli.customizations.cloudformation.yamlhelper import yaml_parse
from numbers import Number
import sys
#from compiler.ast import flatten
import dot
import optparse

import xml.dom.minidom
# Usage message
usgmsg = "Usage: cfgraphml [options] infile.template outfile.graphml"

from simple_icons import TypeIconDir, TypeIcon
#from resource_icons import TypeIconDir, TypeIcon
SVGNode = {}

import collections

UNCONVERTED_SUFFIXES = ['Ref', 'Condition']
FN_PREFIX = 'Fn::'

def flatten(x):
    result = []
    for el in x:
        if isinstance(el, dict):
            result.append(el)
        elif isinstance(x, collections.Iterable) and not isinstance(el, str):
            result.extend(flatten(el))
        else:
            result.append(el)
    return result

def create_dict_node_class(cls):
    """
    Create dynamic node class
    """
    class node_class(cls):
        """Node class created based on the input class"""
        def __init__(self, x, start_mark, end_mark):
            try:
                cls.__init__(self, x)
            except TypeError:
                cls.__init__(self)
            self.start_mark = start_mark
            self.end_mark = end_mark
            self.condition_functions = ['Fn::If']

        def __deepcopy__(self, memo):
            cls = self.__class__
            result = cls.__new__(cls, self.start_mark, self.end_mark)
            memo[id(self)] = result
            for k, v in self.items():
                result[deepcopy(k)] = deepcopy(v, memo)

            return result

        def __copy__(self):
            return self

        def get_safe(self, key, default=None, path=None, type_t=()):
            """
                Get values in format
            """
            path = path or []
            value = self.get(key, default)
            if not isinstance(value, (dict)):
                if isinstance(value, type_t) or not type_t:
                    return [(value, (path[:] + [key]))]

            results = []
            for sub_v, sub_path in value.items_safe(path):
                if isinstance(sub_v, type_t) or not type_t:
                    results.append((sub_v, sub_path))

            return results

        def items_safe(self, path=None, type_t=()):
            """Get items while handling IFs"""
            path = path or []
            if len(self) == 1:
                for k, v in self.items():
                    if k == 'Fn::If':
                        if isinstance(v, list):
                            if len(v) == 3:
                                for i, if_v in enumerate(v[1:]):
                                    if isinstance(if_v, dict):
                                        # yield from if_v.items_safe(path[:] + [k, i - 1])
                                        # Python 2.7 support
                                        for items, p in if_v.items_safe(path[:] + [k, i + 1]):
                                            if isinstance(items, type_t) or not type_t:
                                                yield items, p
                                    elif isinstance(if_v, list):
                                        if isinstance(if_v, type_t) or not type_t:
                                            yield if_v, path[:] + [k, i + 1]
                                    else:
                                        if isinstance(if_v, type_t) or not type_t:
                                            yield if_v, path[:] + [k, i + 1]
                    elif k != 'Ref' and v != 'AWS::NoValue':
                        if isinstance(self, type_t) or not type_t:
                            yield self, path[:]
            else:
                if isinstance(self, type_t) or not type_t:
                    yield self, path[:]

    node_class.__name__ = '%s_node' % cls.__name__
    return node_class

def create_dict_list_class(cls):
    """
    Create dynamic list class
    """
    class node_class(cls):
        """Node class created based on the input class"""
        def __init__(self, x, start_mark, end_mark):
            try:
                cls.__init__(self, x)
            except TypeError:
                cls.__init__(self)
            self.start_mark = start_mark
            self.end_mark = end_mark
            self.condition_functions = ['Fn::If']

        def __deepcopy__(self, memo):
            cls = self.__class__
            result = cls.__new__(cls, self.start_mark, self.end_mark)
            memo[id(self)] = result
            for _, v in enumerate(self):
                result.append(deepcopy(v, memo))

            return result

        def __copy__(self):
            return self

        def items_safe(self, path=None, type_t=()):
            """Get items while handling IFs"""
            path = path or []
            for i, v in enumerate(self):
                if isinstance(v, dict):
                    for items, p in v.items_safe(path[:] + [i]):
                        if isinstance(items, type_t) or not type_t:
                            yield items, p
                else:
                    if isinstance(v, type_t) or not type_t:
                        yield v, path[:] + [i]

    node_class.__name__ = '%s_node' % cls.__name__
    return node_class

dict_node = create_dict_node_class(dict)
list_node = create_dict_list_class(list)

def multi_constructor(loader, tag_suffix, node):
    """
    Deal with !Ref style function format
    """

    if tag_suffix not in UNCONVERTED_SUFFIXES:
        tag_suffix = '{}{}'.format(FN_PREFIX, tag_suffix)

    constructor = None
    if tag_suffix == 'Fn::GetAtt':
        constructor = construct_getatt
    elif isinstance(node, yaml.ScalarNode):
        constructor = loader.construct_scalar
    elif isinstance(node, yaml.SequenceNode):
        constructor = loader.construct_sequence
    elif isinstance(node, yaml.MappingNode):
        constructor = loader.construct_mapping
    else:
        raise 'Bad tag: !{}'.format(tag_suffix)

    return dict_node({tag_suffix: constructor(node)}, node.start_mark, node.end_mark)

def construct_getatt(node):
    """
    Reconstruct !GetAtt into a list
    """

    if isinstance(node.value, (six.string_types)):
        return list_node(node.value.split('.'), node.start_mark, node.end_mark)
    if isinstance(node.value, list):
        return list_node([s.value for s in node.value], node.start_mark, node.end_mark)

    raise ValueError('Unexpected node type: {}'.format(type(node.value)))

yaml.add_multi_constructor('!', multi_constructor)

def yaml_dump_default(o):
    if isinstance(o, datetime):
        return o.isoformat()
    raise TypeError(repr(o) + " is not JSON serializable")


#class Graph:
#    def __init__(self):
#       self.nodes = {}
#       self.edges = []
#       self.default_edge = None
#       self.default_node = None

#G = Graph()
#AG = nx.to_agraph(nx.Graph())

#rank = {}


def main():
    parser = optparse.OptionParser(usage=usgmsg)
    parser.add_option('-f', '--format',
                      action='store', dest='format', default='Graphml',
                      help='selects the output format (Graphml|GML|GDF) [default : %default]')
    parser.add_option('-v', '--verbose',
                      action='store_true', dest='verbose', default=False,
                      help='enables messages (infos, warnings)')
    parser.add_option('-s', '--sweep',
                      action='store_true', dest='sweep', default=False,
                      help='sweep nodes (remove nodes that are not connected)')
    parser.add_option('--nn', '--no-nodes',
                      action='store_false', dest='NodeLabels', default=True,
                      help='do not output any node labels [Graphml]')
    parser.add_option('--ne', '--no-edges',
                      action='store_false', dest='EdgeLabels', default=True,
                      help='do not output any edge labels [Graphml]')
    parser.add_option('--nu', '--no-uml',
                      action='store_false', dest='NodeUml', default=True,
                      help='do not output any node methods/attributes in UML [Graphml]')
    parser.add_option('--na', '--no-arrows',
                      action='store_false', dest='Arrows', default=True,
                      help='do not output any arrows [Graphml]')
    parser.add_option('--nc', '--no-colors',
                      action='store_false', dest='Colors', default=True,
                      help='do not output any colors [Graphml]')
    parser.add_option('--la', '--lump-attributes',
                      action='store_true', dest='LumpAttributes', default=False,
                      help='lump class attributes/methods together with the node label [Graphml]')
    parser.add_option('--sc', '--separator-char',
                      action='store', dest='SepChar', default='_', metavar='SEPCHAR',
                      help='default separator char when lumping attributes/methods [default : "_"]')
    parser.add_option('--ae', '--auto-edges',
                      action='store_true', dest='EdgeLabelsAutoComplete', default=False,
                      help='auto-complete edge labels')
    parser.add_option('--cn', '--color-nodes',
                      action='store', dest='DefaultNodeColor', default='#CCCCFF', metavar='COLOR',
                      help='default node color [default : "#CCCCFF"]')
    parser.add_option('--ce', '--color-edges',
                      action='store', dest='DefaultEdgeColor', default='#000000', metavar='COLOR',
                      help='default edge color [default : "#000000"]')
    parser.add_option('--cnt', '--color-nodes-text',
                      action='store', dest='DefaultNodeTextColor', default='#000000', metavar='COLOR',
                      help='default node text color for labels [default : "#000000"]')
    parser.add_option('--cet', '--color-edges-text',
                      action='store', dest='DefaultEdgeTextColor', default='#000000', metavar='COLOR',
                      help='default edge text color for labels [default : "#000000"]')
    parser.add_option('--ienc', '--input-encoding',
                      action='store', dest='InputEncoding', default='', metavar='ENCODING',
                      help='override encoding for input file [default : locale setting]')
    parser.add_option('--oenc', '--output-encoding',
                      action='store', dest='OutputEncoding', default='', metavar='ENCODING',
                      help='override encoding for text output files [default : locale setting]')
    parser.add_option('--layout', 
                      action='store', dest='LayoutStyle', default='dot',
                      help='layout style for GraphML output '
                           '(dot|spring|circular|random|shell|spectral) '
                           '[default : dot]'
                           )
    parser.add_option('--ah', '--arrowhead',
                      action='store', dest='DefaultArrowHead', default='none', metavar='TYPE',
                      help='sets the default appearance of arrow heads for edges (normal|diamond|dot|...) [default : %default]')
    parser.add_option('--at', '--arrowtail',
                      action='store', dest='DefaultArrowTail', default='none', metavar='TYPE',
                      help='sets the default appearance of arrow tails for edges (normal|diamond|dot|...) [default : %default]')
    parser.add_option('--input-format',
                      action='store', dest='in_format', default='json',
                      help='selects the input format (json|yaml) [default : %default]')

    options, args = parser.parse_args()
    
    options.DefaultNodeColor = dot.colorNameToRgb(options.DefaultNodeColor, '#CCCCFF')
    options.DefaultEdgeColor = dot.colorNameToRgb(options.DefaultEdgeColor, '#000000')
    options.DefaultNodeTextColor = dot.colorNameToRgb(options.DefaultNodeTextColor, '#000000')
    options.DefaultEdgeTextColor = dot.colorNameToRgb(options.DefaultEdgeTextColor, '#000000')

    if len(args) < 2:
        if options.in_format == 'json':
            template = json.load(sys.stdin)
        elif options.in_format == 'yaml':
            #template = yaml_parse(sys.stdin.read())
            template = yaml.load(sys.stdin)
    else:
        infile = args[0]
        outfile = args[1]
        fp = open(infile)
        if options.in_format == 'json':
            template = json.load(fp)
        elif options.in_format == 'yaml':
            #template = yaml_parse(fp.read())
            template = yaml.load(fp)
        fp.close()

    (graph, edges) = extract_graph(template.get('Description', ''), template['Resources'])
    graph['edges'].extend(edges)
    handle_terminals(template, graph, 'Parameters', 'source')
    handle_terminals(template, graph, 'Outputs', 'sink')
    graph['subgraphs'].append(handle_psuedo_params(graph['edges']))
    #print(yaml.dump(template))

    doc = xml.dom.minidom.Document()
    graphml = doc.createElement(u'graphml')
    graphml.setAttribute(u'xmlns',u'http://graphml.graphdrawing.org/xmlns')
    graphml.setAttribute(u'xmlns:xsi',u'http://www.w3.org/2001/XMLSchema-instance')
    graphml.setAttribute(u'xmlns:y',u'http://www.yworks.com/xml/graphml')
    graphml.setAttribute(u'xsi:schemaLocation',u'http://graphml.graphdrawing.org/xmlns/graphml http://www.yworks.com/xml/schema/graphml/1.0/ygraphml.xsd')
    doc.appendChild(graphml)        

    root = None
    render(doc, graphml, root, graph, options)

    for keydata in dot.Data_id:
        key = doc.createElement(u'key')
        for k, v in keydata.items():
            key.setAttribute(k, v)
        graphml.appendChild(key)

    data = doc.createElement(u'data')
    data.setAttribute(u'key', dot.GraphML.data_id[u'resources'])
    res = doc.createElement(u'y:Resources')
    for k, v in SVGNode.items():
        res1 = doc.createElement(u'y:Resource')
        res1.setAttribute(u'id', '%s' % v)
        fp = open('%s/%s' % (TypeIconDir, TypeIcon[k]))
        res1.appendChild(doc.createTextNode(u'%s' % fp.read()))
        fp.close()
        res.appendChild(res1)
    data.appendChild(res)    
    graphml.appendChild(data)
    
    #try:
    #    layout(doc, options)
    #except:
    #    pass
    layout(doc, graph, options)

    # Output
    o = open(outfile, 'w')
    o.write(doc.toprettyxml(indent="  ", encoding="utf-8").decode('utf-8'))
    o.close()

def handle_terminals(template, graph, name, rank):
    if name in template:
        (subgraph, edges) = extract_graph(name, template[name])
        subgraph['name'] = name
        subgraph['rank'] = rank
        #subgraph['style'] = 'filled,rounded'
        subgraph['style'] = 'roundrectangle'
        graph['subgraphs'].append(subgraph)
        graph['edges'].extend(edges)

def handle_psuedo_params(edges):
    graph = {'name': 'Psuedo Parameters', 'nodes': [], 'edges': [], 'subgraphs': [], 'default_edge': None, 'default_node': None }
    graph['style'] = 'ellipse'
    params = set()
    for e in edges:
        if e['from'].startswith(u'AWS::'):
            params.add(e['from'])
    graph['nodes'].extend({'name': n} for n in params)
    return graph

def extract_graph(name, elem):
    graph = {'name': name, 'nodes': [], 'edges': [], 'subgraphs': [], 'default_edge': None, 'default_node': None }
    edges = []
    for item, details in elem.items():
        d = {'name': item}
        properties = None
        for k in details.keys():
            d[k] = details[k]
        graph['nodes'].append(d)
        print(">> %s find_refs(%s)" % (name, item))
        edges.extend(flatten(find_refs(name, item, details)))
    return (graph, edges)

from_to = {}

def find_refs(context, name, elem):
    if isinstance(elem, dict):
        refs = []
        for k, v in elem.items():
            if k == 'Ref':
                assert isinstance(v, str), 'Expected a string: %s' % v
                if v not in from_to:
                    from_to[v] = []
                if not name in from_to[v]:
                    if v == name: print("** %s %s %s" %(k, v, name))
                    from_to[v].append(name)
                    refs.append({'context': context, 'from': v, 'to': name})
            elif k == 'Fn::GetAtt':
                assert isinstance(v, list), 'Expected a list: %s' % v
                if v[0] not in from_to:
                    from_to[v[0]] = []
                if not name in from_to[v[0]]:
                    if v[0] == name: print("** %s %s %s" %(k, v[0], name))
                    from_to[v[0]].append(name)
                    refs.append({'context': context, 'from': v[0], 'to': name})
            else:
                refs.extend(find_refs(name, name, v))
        return refs
    elif isinstance(elem, list):
        return map(lambda e: find_refs(name, name, e), elem)
    elif isinstance(elem, str):
        return []
    elif isinstance(elem, bool):
        return []
    elif isinstance(elem, Number):
        return []
    else:
        print('Unexpected type: %s %s' % (type(elem), elem))
        return []
        #raise AssertionError('Unexpected type: %s %s' % (type(elem), elem))

def layout(doc, graph, options):
    import networkx as nx

    def create_from_graphml(doc):
        from networkx.readwrite.graphml import GraphMLReader

        reader = GraphMLReader()
        glist=list(reader(string=doc.toxml(encoding="utf-8")))
        
        G = nx.Graph()
        for subg in glist:
            for n in subg.nodes():
                if 'label' in subg.node[n]:
                    subg.node[n]['label'] = '"%s"' % subg.node[n]['label']
                dlist = []
                for k in subg.node[n].keys():
                    if not k in ['y', 'x', 'label']:
                        dlist.append(k)
                for k in dlist:
                    del(subg.node[n][k])

            G.add_nodes_from(subg.nodes(data=True))
            G.add_edges_from(subg.edges(data=True))

        # set graph_defaults
        G.graph['graph'] = { 'nodesep': '1.5', 'ranksep': '1.5' }

        return G

    def from_pydot(graph):
        import pydot

        P = pydot.graph_from_dot_data('\n'.join(graph['dot']))
        g_with_pos = pydot.graph_from_dot_data(P.create_dot())
        pos = {}
        for n in g_with_pos.get_nodes():
            p = n.get_pos()
            if p:
                x, y = p.strip('"').split(",")
                x, y = float(x), float(y)
                pos[n.get_name()] = (x, y)
        for s in g_with_pos.get_subgraph_list():
            for n in s.get_nodes():
                p = n.get_pos()
                if p:
                    x, y = p.strip('"').split(",")
                    x, y = float(x), float(y)
                    pos[n.get_name()] = (x, y)
        return pos

    def from_pygraphviz(graph):
        import pygraphviz

        A = pygraphviz.AGraph(string='\n'.join(graph['dot']))
        G = nx.from_agraph(A)

        A.layout(prog=options.LayoutStyle)
        pos = {}
        for n in G:
            node = pygraphviz.Node(A, n)
            try:
                xx,yy = node.attr["pos"].split(',')
                pos[n] = (float(xx), float(yy))
            except:
                pass
        return pos

    if options.LayoutStyle in ['dot', 'neato', 'fdp', 'sfdp', 'twopi', 'circo']:
        graph['dot'].insert(1, 'graph [nodesep=1.5, ranksep=2.0];')
        try:
            pos = from_pydot(graph)
        except:
            try:
                pos = from_pygraphviz(graph)
            except:
                G = create_from_graphml(doc)
                pos = nx.drawing.nx_agraph.graphviz_layout(G, prog=options.LayoutStyle)
    else:
        G = create_from_graphml(doc)
        if options.LayoutStyle == 'spring':
            pos = nx.spring_layout(G, scale=500.0)
        elif options.LayoutStyle == 'circular':
            pos = nx.circular_layout(G, scale=500.0)
        elif options.LayoutStyle == 'random':
            pos = nx.random_layout(g)
            for id, xy in pos.items():
                pos[id][0] *= 500.0
                pos[id][1] *= 500.0
        elif options.LayoutStyle == 'shell':
            pos = nx.shell_layout(G, scale=500.0)
        elif options.LayoutStyle == 'spectral':
            pos = nx.spectral_layout(G, scale=500.0)

    for n in doc.getElementsByTagName('node'):
        id = n.getAttribute('id')
        if id in pos:
            for geom in n.getElementsByTagName('y:Geometry'):
                geom.setAttribute('x', '%s' % pos[id][0])
                geom.setAttribute('y', '%s' % pos[id][1])

def render(doc, graphml, root, graph, options, subgraph=False):
    if root:
        folder = dot.Folder(graph['name'])

        sub = dot.Graph(folder.id).exportGraphml(doc, graphml, options)
        sub.setAttribute(u'parse.edges',u'%d' % len(graph['edges']))   
        sub.setAttribute(u'parse.nodes',u'%d' % len(graph['nodes']))
        sub.setAttribute(u'parse.order', u'free')    

        dom = folder.exportGraphml(doc, graphml, options)
        root.appendChild(dom)
        dom.appendChild(sub)

        root = sub

        #if 'rank' in graph:
        #    nxag = AG.add_subgraph(None, graph['rank'])
        #else:
        #    nxag = AG.add_subgraph(None, folder.id)

    else:
        root = dot.Graph().exportGraphml(doc, graphml, options)
        root.setAttribute(u'parse.edges',u'%d' % len(graph['edges']))   
        root.setAttribute(u'parse.nodes',u'%d' % len(graph['nodes']))
        root.setAttribute(u'parse.order', u'free')    

        #nxag = AG
    
    if 'dot' not in graph:
        graph['dot'] = []

    if subgraph:
        graph['dot'].append('subgraph {')
    else:
        graph['dot'].append('graph {')
    if 'rank' in graph:
        graph['dot'].append('rank=%s;' % graph['rank'])

    for node in graph['nodes']:
        # Process node
        n = dot.Node()
        graph['dot'].append('%s;' % n.id)
        #if 'rank' in graph:
        #    rank_same.append(n.id)
        n.label = node['name']
        n.attribs['modelName'] = 'sandwich'
        n.attribs['modelPosition'] = 's'
        if 'Type' in node and node['Type'].startswith(u'AWS::'):
            if node['Type'] in TypeIcon:
                if node['Type'] not in SVGNode:
                    SVGNode[node['Type']] = '%s' % len(SVGNode)
                n.attribs['SVGNode'] = SVGNode[node['Type']]

        if 'style' in graph:
            n.attribs['shapeType'] = graph['style']
        for k in node.keys():
            if k == 'name':
                continue
            if isinstance(node[k], str):
                v = node[k]
            else:
                v = '%s' % json.dumps(node[k], indent=4, separators=(',', ': '))
            if k == 'Description':
                k = 'description'
            if k not in dot.Node.data_id:
                dot.add_keydata({ u'for': u'node',  u'attr.name': k, u'attr.type':u'string' })
            n.attribs[k] = v

        if 'default_node' in graph and graph['default_node']:
            n.complementAttributes(graph['default_node'])
        n.exportGraphml(doc, root, options)

        #nxag.add_node(n.id)

    #if 'rank' in graph:
    #    rank[graph['rank']] = rank_same
    for s in graph['subgraphs']:
        render(doc, graphml, root, s, options, True)
        if 'dot' in s:
            graph['dot'].extend(s['dot'])

    for edge in graph['edges']:
        # Process edge
        e = dot.Edge()
        e.src = dot.Node.find(edge['from'])
        e.dest = dot.Node.find(edge['to'])
        if 'default_edge' in graph and graph['default_edge']:
            e.complementAttributes(graph['default_edge'])
        e.exportGraphml(doc, root, graph['nodes'], options)

        graph['dot'].append('%s -- %s;' % (e.src.id, e.dest.id))
        #nxag.add_edge((e.src.id, e.dest.id))

    graph['dot'].append('}')

def debug(*s):
    print >>sys.stderr, s

if __name__ == '__main__':
    main()
