#!/usr/bin/env python

import json
from numbers import Number
import sys
from compiler.ast import flatten
import dot
import optparse

import xml.dom.minidom
# Usage message
usgmsg = "Usage: cfgraphml [options] infile.template outfile.graphml"

TypeIconDir = 'resource-isons'
TypeIcon = {
    'AWS::AutoScaling::AutoScalingGroup': 'AutoScaling.svg',
    'AWS::AutoScaling::LaunchConfiguration': 'AutoScalingLaunchConfig.svg',
    'AWS::AutoScaling::LifecycleHook': 'AutoScalingLifecycleHook.svg',
    'AWS::AutoScaling::ScalingPolicy': 'AutoScalingScalingPolicy.svg',
    'AWS::AutoScaling::ScheduledAction': 'AutoScalingScheduledAction.svg',
    'AWS::CloudFormation::CustomResource': 'CloudFormation.svg',
    'AWS::CloudFormation::Stack': 'CloudFormationStack.svg',
    'AWS::CloudFormation::WaitCondition': 'CloudFormation.svg',
    'AWS::CloudFormation::WaitConditionHandle': 'CloudFormation.svg',
    'AWS::CloudFront::Distribution': 'CloudFrontDownloadDistribution.svg',
    'AWS::CloudTrail::Trail': 'CloudTrail.svg',
    'AWS::CloudWatch::Alarm': 'CloudWatchAlarm.svg',
    'AWS::CodeDeploy::Application': 'CodeDeploy.svg',
    'AWS::CodeDeploy::DeploymentConfig': 'CodeDeployDeploymentConfig.svg',
    'AWS::CodeDeploy::DeploymentGroup': 'CodeDeploy.svg',
    'AWS::DataPipeline::Pipeline': 'DataPipeline.svg',
    'AWS::DirectoryService::SimpleAD': 'DirectoryService.svg',
    'AWS::DynamoDB::Table': 'DynamoDBTable.svg',
    'AWS::EC2::CustomerGateway': 'VPCCustomerGateway.svg',
    'AWS::EC2::DHCPOptions': 'EC2DHCPOptions.svg',
    'AWS::EC2::EIP': 'EC2EIP.svg',
    'AWS::EC2::Instance': 'EC2Instance.svg',
    'AWS::EC2::InternetGateway': 'VPCInternetGateway.svg',
    'AWS::EC2::NetworkAcl': 'EC2NetworkAcl.svg',
    'AWS::EC2::NetworkAclEntry': 'EC2NetworkAclEntry.svg',
    'AWS::EC2::NetworkInterface': 'EC2NetworkInterface.svg',
    'AWS::EC2::PlacementGroup': 'EC2PlacementGroup.svg',
    'AWS::EC2::Route': 'EC2Route.svg',
    'AWS::EC2::RouteTable': 'Route53RouteTable.svg',
    'AWS::EC2::SecurityGroup': 'EC2SecurityGroup.svg',
    'AWS::EC2::SpotFleet': 'EC2.svg',
    'AWS::EC2::Subnet': 'EC2.svg',
    'AWS::EC2::Volume': 'EC2Volume.svg',
    'AWS::EC2::VPC': 'VPC.svg',
    'AWS::EC2::VPNConnectionRoute': 'VPNConnectionRoute.svg',
    'AWS::EC2::VPCEndpoint': 'EC2VPCEndpoint.svg',
    'AWS::EC2::VPNGateway': 'VPCVPNGateway.svg',
    'AWS::ECS::Cluster': 'Cloud.svg',
    'AWS::ECS::Service': 'Cloud.svg',
    'AWS::ECS::TaskDefinition': 'Cloud.svg',
    'AWS::EFS::FileSystem': 'Cloud.svg',
    'AWS::EFS::MountTarget': 'Cloud.svg',
    'AWS::ElastiCache::CacheCluster': 'ElasticCache.svg',
    'AWS::ElastiCache::ParameterGroup': 'ElasticCache.svg',
    'AWS::ElastiCache::ReplicationGroup': 'ElasticCache.svg',
    'AWS::ElastiCache::SecurityGroup': 'ElasticCacheSecurityGroup.svg',
    'AWS::ElastiCache::SecurityGroupIngress': 'ElasticCacheSecurityGroup.svg',
    'AWS::ElastiCache::SubnetGroup': 'ElasticCacheSecurityGroup.svg',
    'AWS::ElasticBeanstalk::Application': 'ElasticBeanstalkApplication.svg',
    'AWS::ElasticBeanstalk::ApplicationVersion': 'ElasticBeanstalkApplication.svg',
    'AWS::ElasticBeanstalk::ConfigurationTemplate': 'ElasticBeanstalkConfigurationTemplate.svg',
    'AWS::ElasticBeanstalk::Environment': 'ElasticBeanstalk.svg',
    'AWS::ElasticLoadBalancing::LoadBalancer': 'ElasticLoadBalancing.svg',
    'AWS::IAM::AccessKey': 'IAM.svg',
    'AWS::IAM::Group': 'IAM.svg',
    'AWS::IAM::InstanceProfile': 'IAM.svg',
    'AWS::IAM::ManagedPolicy': 'ManagedPolicy.svg',
    'AWS::IAM::Policy': 'Policy.svg',
    'AWS::IAM::Role': 'IAMRoles.svg',
    'AWS::IAM::User': 'User.svg',
    'AWS::IAM::UserToGroupAddition': 'IAMUserToGroupAddition.svg',
    'AWS::Kinesis::Stream': 'AppStream.svg',
    'AWS::Lambda::Function': 'Lambda.svg',
    'AWS::Lambda::Permission': 'LambdaPermission.svg',
    'AWS::Lambda::EventSourceMapping': 'LambdaEventSourceMapping.svg',
    'AWS::Logs::LogGroup': 'Cloud.svg',
    'AWS::Logs::MetricFilter': 'Cloud.svg',
    'AWS::OpsWorks::App': 'OpsWorksApps.svg',
    'AWS::OpsWorks::Instance': 'OpsWorksInstances.svg',
    'AWS::OpsWorks::Layer': 'OpsWorksLayers.svg',
    'AWS::OpsWorks::Stack': 'OpsWorksStack.svg',
    'AWS::RDS::DBInstance': 'RDSDBInstance.svg',
    'AWS::RDS::DBParameterGroup': 'RDS.svg',
    'AWS::RDS::DBSecurityGroup': 'RDSDBSecurityGroup.svg',
    'AWS::RDS::DBSubnetGroup': 'RDS.svg',
    'AWS::RDS::DBClusterParameterGroup': 'AmazonRDS_Cluster.svg',
    'AWS::RDS::EventSubscription': 'RDS.svg',
    'AWS::RDS::OptionGroup': 'RDS.svg',
    'AWS::RDS::DBCluster': 'AmazonRDS_Cluster.svg',
    'AWS::Redshift::Cluster': 'RedshiftDW2Cluster.svg',
    'AWS::Redshift::ClusterParameterGroup': 'Cloud.svg',
    'AWS::Redshift::ClusterSecurityGroup': 'RedshiftClusterSecurityGroup.svg',
    'AWS::Redshift::ClusterSubnetGroup': 'RedshiftClusterSecurityGroup.svg',
    'AWS::Route53::HealthCheck': 'Route53HealthCheck.svg',
    'AWS::Route53::HostedZone': 'Route53HostedZone.svg',
    'AWS::Route53::RecordSet': 'Route53RecordSetGroup.svg',
    'AWS::Route53::RecordSetGroup': 'Route53RecordSetGroup.svg',
    'AWS::S3::Bucket': 'S3Bucket.svg',
    'AWS::S3::BucketPolicy': 'S3BucketPolicy.svg',
    'AWS::SDB::Domain': 'Cloud.svg',
    'AWS::SNS::Topic': 'SNSTopic.svg',
    'AWS::SNS::TopicPolicy': 'SNSTopicPolicy.svg',
    'AWS::SQS::Queue': 'SQSQueue.svg',
    'AWS::SQS::QueuePolicy': 'SQSQueuePolicy.svg',
    'AWS::WorkSpaces::Workspace': 'WorkSpaces.svg'
}
SVGNode = {}

#class Graph:
#    def __init__(self):
#	self.nodes = {}
#	self.edges = []
#	self.default_edge = None
#	self.default_node = None

#G = Graph()
#AG = nx.to_agraph(nx.Graph())

#rank = {}


def main():
    parser = optparse.OptionParser(usage=usgmsg)
    parser.add_option('-f', '--format',
                      action='store', dest='format', default='Graphml',
                      help='selects the output format (Graphml|GML|GDF) [default : %default]')
    parser.add_option('-v', '--verbose',
                      action='store_true', dest='verbose', default=False,
                      help='enables messages (infos, warnings)')
    parser.add_option('-s', '--sweep',
                      action='store_true', dest='sweep', default=False,
                      help='sweep nodes (remove nodes that are not connected)')
    parser.add_option('--nn', '--no-nodes',
                      action='store_false', dest='NodeLabels', default=True,
                      help='do not output any node labels [Graphml]')
    parser.add_option('--ne', '--no-edges',
                      action='store_false', dest='EdgeLabels', default=True,
                      help='do not output any edge labels [Graphml]')
    parser.add_option('--nu', '--no-uml',
                      action='store_false', dest='NodeUml', default=True,
                      help='do not output any node methods/attributes in UML [Graphml]')
    parser.add_option('--na', '--no-arrows',
                      action='store_false', dest='Arrows', default=True,
                      help='do not output any arrows [Graphml]')
    parser.add_option('--nc', '--no-colors',
                      action='store_false', dest='Colors', default=True,
                      help='do not output any colors [Graphml]')
    parser.add_option('--la', '--lump-attributes',
                      action='store_true', dest='LumpAttributes', default=False,
                      help='lump class attributes/methods together with the node label [Graphml]')
    parser.add_option('--sc', '--separator-char',
                      action='store', dest='SepChar', default='_', metavar='SEPCHAR',
                      help='default separator char when lumping attributes/methods [default : "_"]')
    parser.add_option('--ae', '--auto-edges',
                      action='store_true', dest='EdgeLabelsAutoComplete', default=False,
                      help='auto-complete edge labels')
    parser.add_option('--cn', '--color-nodes',
                      action='store', dest='DefaultNodeColor', default='#CCCCFF', metavar='COLOR',
                      help='default node color [default : "#CCCCFF"]')
    parser.add_option('--ce', '--color-edges',
                      action='store', dest='DefaultEdgeColor', default='#000000', metavar='COLOR',
                      help='default edge color [default : "#000000"]')
    parser.add_option('--cnt', '--color-nodes-text',
                      action='store', dest='DefaultNodeTextColor', default='#000000', metavar='COLOR',
                      help='default node text color for labels [default : "#000000"]')
    parser.add_option('--cet', '--color-edges-text',
                      action='store', dest='DefaultEdgeTextColor', default='#000000', metavar='COLOR',
                      help='default edge text color for labels [default : "#000000"]')
    parser.add_option('--ienc', '--input-encoding',
                      action='store', dest='InputEncoding', default='', metavar='ENCODING',
                      help='override encoding for input file [default : locale setting]')
    parser.add_option('--oenc', '--output-encoding',
                      action='store', dest='OutputEncoding', default='', metavar='ENCODING',
                      help='override encoding for text output files [default : locale setting]')
    parser.add_option('--layout', 
                      action='store', dest='LayoutStyle', default='dot',
                      help='layout style for GraphML output '
                           '(dot|spring|circular|random|shell|spectral) '
                           '[default : dot]'
                           )
    parser.add_option('--ah', '--arrowhead',
                      action='store', dest='DefaultArrowHead', default='none', metavar='TYPE',
                      help='sets the default appearance of arrow heads for edges (normal|diamond|dot|...) [default : %default]')
    parser.add_option('--at', '--arrowtail',
                      action='store', dest='DefaultArrowTail', default='none', metavar='TYPE',
                      help='sets the default appearance of arrow tails for edges (normal|diamond|dot|...) [default : %default]')

    options, args = parser.parse_args()
    
    options.DefaultNodeColor = dot.colorNameToRgb(options.DefaultNodeColor, '#CCCCFF')
    options.DefaultEdgeColor = dot.colorNameToRgb(options.DefaultEdgeColor, '#000000')
    options.DefaultNodeTextColor = dot.colorNameToRgb(options.DefaultNodeTextColor, '#000000')
    options.DefaultEdgeTextColor = dot.colorNameToRgb(options.DefaultEdgeTextColor, '#000000')

    if len(args) < 2:
        template = json.load(sys.stdin)
    else:
        infile = args[0]
        outfile = args[1]
        fp = open(infile)
        template = json.load(fp)
        fp.close()

    (graph, edges) = extract_graph(template.get('Description', ''), template['Resources'])
    graph['edges'].extend(edges)
    handle_terminals(template, graph, 'Parameters', 'source')
    handle_terminals(template, graph, 'Outputs', 'sink')
    graph['subgraphs'].append(handle_psuedo_params(graph['edges']))

    doc = xml.dom.minidom.Document()
    graphml = doc.createElement(u'graphml')
    graphml.setAttribute(u'xmlns',u'http://graphml.graphdrawing.org/xmlns')
    graphml.setAttribute(u'xmlns:xsi',u'http://www.w3.org/2001/XMLSchema-instance')
    graphml.setAttribute(u'xmlns:y',u'http://www.yworks.com/xml/graphml')
    graphml.setAttribute(u'xsi:schemaLocation',u'http://graphml.graphdrawing.org/xmlns/graphml http://www.yworks.com/xml/schema/graphml/1.0/ygraphml.xsd')
    doc.appendChild(graphml)        

    root = None
    render(doc, graphml, root, graph, options)

    for keydata in dot.Data_id:
	key = doc.createElement(u'key')
        for k, v in keydata.iteritems():
	    key.setAttribute(k, v)
	graphml.appendChild(key)

    data = doc.createElement(u'data')
    data.setAttribute(u'key', dot.GraphML.data_id[u'resources'])
    res = doc.createElement(u'y:Resources')
    for k, v in SVGNode.iteritems():
        res1 = doc.createElement(u'y:Resource')
        res1.setAttribute(u'id', '%s' % v)
        fp = open('%s/%s' % (TypeIconDir, TypeIcon[k]))
        res1.appendChild(doc.createTextNode(u'%s' % fp.read()))
        fp.close()
        res.appendChild(res1)
    data.appendChild(res)    
    graphml.appendChild(data)
    
    #try:
    #    layout(doc, options)
    #except:
    #    pass
    layout(doc, graph, options)

    # Output
    o = open(outfile, 'w')
    o.write(doc.toprettyxml(indent="  ", encoding="utf-8"))
    o.close()

def handle_terminals(template, graph, name, rank):
    if name in template:
        (subgraph, edges) = extract_graph(name, template[name])
        subgraph['name'] = name
        subgraph['rank'] = rank
        #subgraph['style'] = 'filled,rounded'
        subgraph['style'] = 'roundrectangle'
        graph['subgraphs'].append(subgraph)
        graph['edges'].extend(edges)

def handle_psuedo_params(edges):
    graph = {'name': 'Psuedo Parameters', 'nodes': [], 'edges': [], 'subgraphs': [], 'default_edge': None, 'default_node': None }
    graph['style'] = 'ellipse'
    params = set()
    for e in edges:
        if e['from'].startswith(u'AWS::'):
            params.add(e['from'])
    graph['nodes'].extend({'name': n} for n in params)
    return graph

def extract_graph(name, elem):
    graph = {'name': name, 'nodes': [], 'edges': [], 'subgraphs': [], 'default_edge': None, 'default_node': None }
    edges = []
    for item, details in elem.iteritems():
        d = {'name': item}
        properties = None
        for k in details.keys():
            d[k] = details[k]
        graph['nodes'].append(d)
        edges.extend(flatten(find_refs(item, details)))
    return (graph, edges)

from_to = {}

def find_refs(context, elem):
    if isinstance(elem, dict):
        refs = []
        for k, v in elem.iteritems():
            if unicode(k) == unicode('Ref'):
                assert isinstance(v, basestring), 'Expected a string: %s' % v
                if not from_to.has_key(v):
                    from_to[v] = []
                if not context in from_to[v]:
                    from_to[v].append(context)
                    refs.append({'from': v, 'to': context})
            elif unicode(k) == unicode('Fn::GetAtt'):
                assert isinstance(v, list), 'Expected a list: %s' % v
                if not from_to.has_key(v[0]):
                    from_to[v[0]] = []
                if not context in from_to[v[0]]:
                    from_to[v[0]].append(context)
                    refs.append({'from': v[0], 'to': context})
            else:
                refs.extend(find_refs(context, v))
        return refs
    elif isinstance(elem, list):
        return map(lambda e: find_refs(context, e), elem)
    elif isinstance(elem, basestring):
        return []
    elif isinstance(elem, bool):
        return []
    elif isinstance(elem, Number):
        return []
    else:
        raise AssertionError('Unexpected type: %s' % elem)

def layout(doc, graph, options):
    import networkx as nx

    def create_from_graphml(doc):
        from networkx.readwrite.graphml import GraphMLReader

        reader = GraphMLReader()
	glist=list(reader(string=doc.toxml(encoding="utf-8")))
	
	G = nx.Graph()
	for subg in glist:
	    for n in subg.nodes():
		if subg.node[n].has_key('label'):
		    subg.node[n]['label'] = '"%s"' % subg.node[n]['label']
		for k in subg.node[n].keys():
		    if not k in ['y', 'x', 'label']:
			del(subg.node[n][k])
	    G.add_nodes_from(subg.nodes(data=True))
	    G.add_edges_from(subg.edges(data=True))

	# set graph_defaults
	G.graph['graph'] = { 'nodesep': '1.5', 'ranksep': '1.5' }

        return G

    def from_pydot(graph):
        import pydot

        P = pydot.graph_from_dot_data('\n'.join(graph['dot']))
        g_with_pos = pydot.graph_from_dot_data(P.create_dot())
	pos = {}
	for n in g_with_pos.get_nodes():
	    p = n.get_pos()
	    if p:
		x, y = p.strip('"').split(",")
		x, y = float(x), float(y)
		pos[n.get_name()] = (x, y)
	for s in g_with_pos.get_subgraph_list():
	    for n in s.get_nodes():
		p = n.get_pos()
		if p:
		    x, y = p.strip('"').split(",")
		    x, y = float(x), float(y)
		    pos[n.get_name()] = (x, y)
        return pos

    def from_pygraphviz(graph):
        import pygraphviz

	A = pygraphviz.AGraph(string='\n'.join(graph['dot']))
	G = nx.from_agraph(A)

	A.layout(prog=options.LayoutStyle)
	pos = {}
	for n in G:
	    node = pygraphviz.Node(A, n)
	    try:
		xx,yy = node.attr["pos"].split(',')
		pos[n] = (float(xx), float(yy))
	    except:
		pass
        return pos

    if options.LayoutStyle in ['dot', 'neato', 'fdp', 'sfdp', 'twopi', 'circo']:
	graph['dot'].insert(1, 'graph [nodesep=1.5, ranksep=2.0];')
        try:
            pos = from_pydot(graph)
        except:
            try:
                pos = from_pygraphviz(graph)
            except:
                G = create_from_graphml(doc)
                pos = nx.graphviz_layout(G, prog=options.LayoutStyle)
    else:
        G = create_from_graphml(doc)
	if options.LayoutStyle == 'spring':
	    pos = nx.spring_layout(G, scale=500.0)
	elif options.LayoutStyle == 'circular':
	    pos = nx.circular_layout(G, scale=500.0)
	elif options.LayoutStyle == 'random':
	    pos = nx.random_layout(g)
	    for id, xy in pos.iteritems():
		pos[id][0] *= 500.0
		pos[id][1] *= 500.0
	elif options.LayoutStyle == 'shell':
	    pos = nx.shell_layout(G, scale=500.0)
	elif options.LayoutStyle == 'spectral':
	    pos = nx.spectral_layout(G, scale=500.0)

    for n in doc.getElementsByTagName('node'):
        id = n.getAttribute('id')
        if pos.has_key(id):
	    for geom in n.getElementsByTagName('y:Geometry'):
		geom.setAttribute('x', '%s' % pos[id][0])
		geom.setAttribute('y', '%s' % pos[id][1])

def render(doc, graphml, root, graph, options, subgraph=False):
    if root:
        folder = dot.Folder(graph['name'])

	sub = dot.Graph(folder.id).exportGraphml(doc, graphml, options)
	sub.setAttribute(u'parse.edges',u'%d' % len(graph['edges']))   
	sub.setAttribute(u'parse.nodes',u'%d' % len(graph['nodes']))
	sub.setAttribute(u'parse.order', u'free')    

        dom = folder.exportGraphml(doc, graphml, options)
	root.appendChild(dom)
	dom.appendChild(sub)

        root = sub

        #if graph.has_key('rank'):
        #    nxag = AG.add_subgraph(None, graph['rank'])
        #else:
        #    nxag = AG.add_subgraph(None, folder.id)

    else:
	root = dot.Graph().exportGraphml(doc, graphml, options)
	root.setAttribute(u'parse.edges',u'%d' % len(graph['edges']))   
	root.setAttribute(u'parse.nodes',u'%d' % len(graph['nodes']))
	root.setAttribute(u'parse.order', u'free')    

        #nxag = AG
    
    if not graph.has_key('dot'):
        graph['dot'] = []

    if subgraph:
        graph['dot'].append('subgraph {')
    else:
        graph['dot'].append('graph {')
    if graph.has_key('rank'):
        graph['dot'].append('rank=%s;' % graph['rank'])

    for node in graph['nodes']:
	# Process node
	n = dot.Node()
        graph['dot'].append('%s;' % n.id)
        #if graph.has_key('rank'):
        #    rank_same.append(n.id)
	n.label = node['name']
        n.attribs['modelName'] = 'sandwich'
        n.attribs['modelPosition'] = 's'
        if node.has_key('Type') and node['Type'].startswith(u'AWS::'):
            if TypeIcon.has_key(node['Type']):
                if not SVGNode.has_key(node['Type']):
                    SVGNode[node['Type']] = '%s' % len(SVGNode)
                n.attribs['SVGNode'] = SVGNode[node['Type']]

        if graph.has_key('style'):
	    n.attribs['shapeType'] = graph['style']
        for k in node.keys():
	    if k == 'name':
                continue
            if isinstance(node[k], basestring):
                v = node[k]
            else:
	        v = '%s' % json.dumps(node[k], indent=4, separators=(',', ': '))
            if k == 'Description':
                k = 'description'
	    if not dot.Node.data_id.has_key(k):
		dot.add_keydata({ u'for': u'node',  u'attr.name': k, u'attr.type':u'string' })
	    n.attribs[k] = v

	if graph.has_key('default_node') and graph['default_node']:
	    n.complementAttributes(graph['default_node'])
        n.exportGraphml(doc, root, options)

        #nxag.add_node(n.id)

    #if graph.has_key('rank'):
    #    rank[graph['rank']] = rank_same
    for s in graph['subgraphs']:
        render(doc, graphml, root, s, options, True)
        if s.has_key('dot'):
            graph['dot'].extend(s['dot'])

    for edge in graph['edges']:
        # Process edge
        e = dot.Edge()
        e.src = dot.Node.find(edge['from'])
        e.dest = dot.Node.find(edge['to'])
        if graph.has_key('default_edge') and graph['default_edge']:
            e.complementAttributes(graph['default_edge'])
        e.exportGraphml(doc, root, graph['nodes'], options)

        graph['dot'].append('%s -- %s;' % (e.src.id, e.dest.id))
        #nxag.add_edge((e.src.id, e.dest.id))

    graph['dot'].append('}')

def debug(*s):
    print >>sys.stderr, s

if __name__ == '__main__':
    main()
